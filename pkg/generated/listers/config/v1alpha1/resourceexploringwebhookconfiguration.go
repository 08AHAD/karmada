// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/karmada-io/karmada/pkg/apis/config/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceExploringWebhookConfigurationLister helps list ResourceExploringWebhookConfigurations.
// All objects returned here must be treated as read-only.
type ResourceExploringWebhookConfigurationLister interface {
	// List lists all ResourceExploringWebhookConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceExploringWebhookConfiguration, err error)
	// ResourceExploringWebhookConfigurations returns an object that can list and get ResourceExploringWebhookConfigurations.
	ResourceExploringWebhookConfigurations(namespace string) ResourceExploringWebhookConfigurationNamespaceLister
	ResourceExploringWebhookConfigurationListerExpansion
}

// resourceExploringWebhookConfigurationLister implements the ResourceExploringWebhookConfigurationLister interface.
type resourceExploringWebhookConfigurationLister struct {
	indexer cache.Indexer
}

// NewResourceExploringWebhookConfigurationLister returns a new ResourceExploringWebhookConfigurationLister.
func NewResourceExploringWebhookConfigurationLister(indexer cache.Indexer) ResourceExploringWebhookConfigurationLister {
	return &resourceExploringWebhookConfigurationLister{indexer: indexer}
}

// List lists all ResourceExploringWebhookConfigurations in the indexer.
func (s *resourceExploringWebhookConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceExploringWebhookConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceExploringWebhookConfiguration))
	})
	return ret, err
}

// ResourceExploringWebhookConfigurations returns an object that can list and get ResourceExploringWebhookConfigurations.
func (s *resourceExploringWebhookConfigurationLister) ResourceExploringWebhookConfigurations(namespace string) ResourceExploringWebhookConfigurationNamespaceLister {
	return resourceExploringWebhookConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceExploringWebhookConfigurationNamespaceLister helps list and get ResourceExploringWebhookConfigurations.
// All objects returned here must be treated as read-only.
type ResourceExploringWebhookConfigurationNamespaceLister interface {
	// List lists all ResourceExploringWebhookConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceExploringWebhookConfiguration, err error)
	// Get retrieves the ResourceExploringWebhookConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResourceExploringWebhookConfiguration, error)
	ResourceExploringWebhookConfigurationNamespaceListerExpansion
}

// resourceExploringWebhookConfigurationNamespaceLister implements the ResourceExploringWebhookConfigurationNamespaceLister
// interface.
type resourceExploringWebhookConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceExploringWebhookConfigurations in the indexer for a given namespace.
func (s resourceExploringWebhookConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceExploringWebhookConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceExploringWebhookConfiguration))
	})
	return ret, err
}

// Get retrieves the ResourceExploringWebhookConfiguration from the indexer for a given namespace and name.
func (s resourceExploringWebhookConfigurationNamespaceLister) Get(name string) (*v1alpha1.ResourceExploringWebhookConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resourceexploringwebhookconfiguration"), name)
	}
	return obj.(*v1alpha1.ResourceExploringWebhookConfiguration), nil
}
